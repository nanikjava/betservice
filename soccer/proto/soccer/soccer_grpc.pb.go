// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package soccer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SoccerClient is the client API for Soccer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoccerClient interface {
	// ListRaces will return a collection of all races.
	ListMatches(ctx context.Context, in *ListMatchesRequest, opts ...grpc.CallOption) (*ListMatchesResponse, error)
}

type soccerClient struct {
	cc grpc.ClientConnInterface
}

func NewSoccerClient(cc grpc.ClientConnInterface) SoccerClient {
	return &soccerClient{cc}
}

func (c *soccerClient) ListMatches(ctx context.Context, in *ListMatchesRequest, opts ...grpc.CallOption) (*ListMatchesResponse, error) {
	out := new(ListMatchesResponse)
	err := c.cc.Invoke(ctx, "/soccer.Soccer/ListMatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoccerServer is the server API for Soccer service.
// All implementations should embed UnimplementedSoccerServer
// for forward compatibility
type SoccerServer interface {
	// ListRaces will return a collection of all races.
	ListMatches(context.Context, *ListMatchesRequest) (*ListMatchesResponse, error)
}

// UnimplementedSoccerServer should be embedded to have forward compatible implementations.
type UnimplementedSoccerServer struct {
}

func (UnimplementedSoccerServer) ListMatches(context.Context, *ListMatchesRequest) (*ListMatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMatches not implemented")
}

// UnsafeSoccerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoccerServer will
// result in compilation errors.
type UnsafeSoccerServer interface {
	mustEmbedUnimplementedSoccerServer()
}

func RegisterSoccerServer(s grpc.ServiceRegistrar, srv SoccerServer) {
	s.RegisterService(&Soccer_ServiceDesc, srv)
}

func _Soccer_ListMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoccerServer).ListMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soccer.Soccer/ListMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoccerServer).ListMatches(ctx, req.(*ListMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Soccer_ServiceDesc is the grpc.ServiceDesc for Soccer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Soccer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "soccer.Soccer",
	HandlerType: (*SoccerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMatches",
			Handler:    _Soccer_ListMatches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "soccer/soccer.proto",
}
